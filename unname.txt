1) unnamed empoyee

-- Create the Employee table
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    dept_id NUMBER,
    emp_name VARCHAR2(50),
    DoJ DATE,
    salary NUMBER,
    commission NUMBER,
    job_title VARCHAR2(50)
);

-- Create the Salary_Increment table
CREATE TABLE Salary_Increment (
    emp_id NUMBER PRIMARY KEY,
    new_salary NUMBER
);

-- Insert sample data into the Employee table
INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (1, 101, 'John Doe', TO_DATE('2023-01-15', 'yyyy-mm-dd'), 50000, NULL, 'Manager');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (2, 102, 'Jane Smith', TO_DATE('2023-02-20', 'yyyy-mm-dd'), 60000, NULL, 'Developer');

-- Insert sample data into the Salary_Increment table
INSERT INTO Salary_Increment (emp_id, new_salary)
VALUES (1, 55000);

INSERT INTO Salary_Increment (emp_id, new_salary)
VALUES (2, 65000);

-- Add more INSERT statements as needed to insert additional sample data.

-- Declare user-defined exceptions
DECLARE
    emp_id_to_increment NUMBER;
    years_of_experience NUMBER;
    incremented_salary NUMBER;
    
    -- User-defined exceptions
    InvalidEmpId EXCEPTION;
    InsufficientExperience EXCEPTION;
    ExperienceOutOfRange EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(InvalidEmpId, -20001);  -- Associate error codes
    PRAGMA EXCEPTION_INIT(InsufficientExperience, -20002);
    PRAGMA EXCEPTION_INIT(ExperienceOutOfRange, -20003);
BEGIN
    -- Accept emp_id from the user
    emp_id_to_increment := &emp_id;  -- You can also use an explicit prompt for user input

    -- Get years of experience based on DoJ
    SELECT EXTRACT(YEAR FROM (SYSDATE - DoJ)) INTO years_of_experience
    FROM Employee
    WHERE emp_id = emp_id_to_increment;

    -- Check if the employee exists and has valid experience
    IF years_of_experience IS NULL THEN
        RAISE InvalidEmpId;
    ELSIF years_of_experience > 10 THEN
        incremented_salary := salary * 1.20;  -- Increase salary by 20%
    ELSIF years_of_experience > 5 THEN
        incremented_salary := salary * 1.10;  -- Increase salary by 10%
    ELSE
        incremented_salary := salary * 1.05;  -- Increase salary by 5%
    END IF;

    -- Insert the incremented salary into the Salary_Increment table
    INSERT INTO Salary_Increment (emp_id, new_salary)
    VALUES (emp_id_to_increment, incremented_salary);
    
    COMMIT;
    
    -- Display the incremented salary
    DBMS_OUTPUT.PUT_LINE('Salary for Employee ' || emp_id_to_increment || ' is incremented to ' || incremented_salary);

EXCEPTION
    WHEN InvalidEmpId THEN
        DBMS_OUTPUT.PUT_LINE('Invalid Employee ID or Employee not found.');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee not found.');
    WHEN ExperienceOutOfRange THEN
        DBMS_OUTPUT.PUT_LINE('Years of experience out of range.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

//----------------------------------------------------------------------------------
//----------------------------------------
//-----------------------------------
1) aggregation "Movies"

db.createCollection("Movies_Data")

db.Movies_Data.insertMany([
  {
    Movie_ID: 1,
    Movie_Name: "Movie1",
    Director: "Director1",
    Genre: "Genre1",
    BoxOfficeCollection: 1000000
  },
  {
    Movie_ID: 2,
    Movie_Name: "Movie2",
    Director: "Director1",
    Genre: "Genre2",
    BoxOfficeCollection: 2000000
  },
  {
    Movie_ID: 3,
    Movie_Name: "Movie3",
    Director: "Director2",
    Genre: "Genre1",
    BoxOfficeCollection: 3000000
  },
  {
    Movie_ID: 4,
    Movie_Name: "Movie4",
    Director: "Director3",
    Genre: "Genre4",
    BoxOfficeCollection: 4000000
  }
]);

1)
db.Movies_Data.aggregate(
  {
    $group: {
      _id: "$Director",
      "NoofMOvies": { $sum: 1 }
    }
  }
 )
 
2)
db.Movies_Data.aggregate(
  {
    $group: {
      _id: "$Genre",
      "Highest BoC": { $max: "$BoxOfficeCollection" }
    }
  }
 )

3)
db.Movies_Data.aggregate(
  {
    $group: {
      _id: "$Genre",
      "Highest BoC": { $max: "$BoxOfficeCollection" }
    }
  },
  {
    $sort:{"Highest BoC":1}
  }
 )

4)
db.Movies_Data.createIndex({ Movie_ID: 1 });
5)
db.Movies_Data.createIndex({ Movie_Name: 1}, {Director: 1 });
6)and7)
db.Movies_Data.dropIndex({ Movie_Name: 1}, {Director: 1 });

//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------

2) aggregation "student"

db.createCollection("Student_Data")

db.Student_Data.insertMany([
  {
    Student_ID: 1,
    Student_Name: "Alice",
    Department: "Math",
    Marks: 95
  },
  {
    Student_ID: 2,
    Student_Name: "Bob",
    Department: "Physics",
    Marks: 88
  },
  {
    Student_ID: 3,
    Student_Name: "Charlie",
    Department: "Math",
    Marks: 90
  },
  {
    Student_ID: 4,
    Student_Name: "David",
    Department: "Physics",
    Marks: 92
  }
])

1)
db.Student_Data.aggregate(
  {
    $group: {
      _id: "$Department",
      "Avg Marks": { $avg: "$Marks" }
    }
  }
 )
 
 2)
 db.Student_Data.aggregate(
  {
    $group: {
      _id: "$Department",
      "No of students": { $sum: 1 }
    }
  }
 )
 
 3)
 db.Student_Data.aggregate(
  {
    $group: {
      _id: "$Department",
      "Highest Marks": { $max: "$Marks" }
    }
  },
  {
    $sort:{"Highest Marks": -1}
  }
 )
 
 4)
 db.Student_Data.createIndex({ Student_ID: 1 });
 5)
 db.Student_Data.createIndex({ Student_Name: 1 },{Department:1});
 6)and7)
 db.Student_Data.dropIndex({ Student_Name: 1},{Department: 1 });


1)crud Social media

db.createCollection("Social_Media")

db.Social_Media.insertMany([
  {
    User_Id: 1,
    User_Name: "User1",
    No_of_Posts: 105,
    No_of_Friends: 50,
    Friends_List: ["Friend1", "Friend2", "Friend3"],
    Interests: ["Interest1", "Interest2", "Interest3"]
  },
  {
    User_Id: 2,
    User_Name: "User2",
    No_of_Posts: 90,
    No_of_Friends: 100,
    Friends_List: ["Friend4", "Friend2", "Friend5"],
    Interests: ["Interest4", "Interest5", "Interest3"]
  }
  // Add 19 more documents with similar structure
])

1)
db.Social_Media.find({}, { _id: 0, User_Id: 1, User_Name: 1, No_of_Posts: 1, No_of_Friends: 1 }).pretty();

2)
db.Social_Media.find({No_of_Posts:{$gt:100}})

3)
db.Social_Media.find({}, { _id: 0, User_Name: 1,Friends_List: 1 })

4)
db.Social_Media.find({No_of_Friends:{$gt:5}}, { _id: 0, User_Name: 1,Friends_List: 1 })

5)
db.Social_Media.find().sort({No_of_Posts:-1})

//-------------------------------------------------------------------------
//--------------------------------------------------------------


2)crud "student"

db.createCollection("Student")

db.Student.insertMany([
  {
    Roll_No: 1,
    Name: "Student1",
    Class: "ClassA",
    Marks: 85,
    Address: "Address1",
    Enrolled_Courses: ["DBMS", "TOC", "Math"]
  },
  {
    Roll_No: 2,
    Name: "Student2",
    Class: "ClassB",
    Marks: 90,
    Address: "Address2",
    Enrolled_Courses: ["TOC", "Physics"]
  },
  // Add 8 more documents with similar 
]);

1)
db.Student.find({ Enrolled_Courses: { $all: ["DBMS", "TOC"] }, }, { _id: 0, Name: 1 });

2)
db.Student.find(
    { Marks: { $gt: 50 },{ Class: "TE" },
    { _id: 0, Roll_No: 1, Class: 1 });

3)
db.Student.updateOne({ Roll_No: "A10" }, {
  $set: {
    Name: "UpdatedName",
    Class: "UpdatedClass",
    Marks: 100,
    Address: "UpdatedAddress",
    Enrolled_Courses: ["UpdatedCourse1", "UpdatedCourse2"]
  }
});

4)
db.Student.find({}, { Name: 1, Marks: 1, _id: 0 }).sort({ Marks: -1 }).skip(2).limit(2);

5)
db.Student.deleteMany({ Marks: { $lt: 20 } });

6)
db.Student.deleteOne({});


1) cursor product

 Create the Products table
CREATE TABLE Products (
    Product_id NUMBER PRIMARY KEY,
    Product_Name VARCHAR2(50),
    Product_Type VARCHAR2(50),
    Price NUMBER
);

-- Insert sample data into the Products table
INSERT INTO Products (Product_id, Product_Name, Product_Type, Price)
VALUES (1, 'Laptop', 'Electronics', 1000.00);

INSERT INTO Products (Product_id, Product_Name, Product_Type, Price)
VALUES (2, 'Smartphone', 'Electronics', 500.00);

INSERT INTO Products (Product_id, Product_Name, Product_Type, Price)
VALUES (3, 'T-shirt', 'Apparel', 20.00);

INSERT INTO Products (Product_id, Product_Name, Product_Type, Price)
VALUES (4, 'Book', 'Books', 15.00);

-- Add more INSERT statements as needed to insert additional sample data.

1)
DECLARE
    v_min_price NUMBER := &min_price; -- User input for minimum price
    v_max_price NUMBER := &max_price; -- User input for maximum price
    v_product_type VARCHAR2(50) := 'Apparel'; -- Type to filter

    CURSOR PriceRangeCursor IS
        SELECT Product_id, Product_Name, Price
        FROM Products
        WHERE Price BETWEEN v_min_price AND v_max_price
        AND Product_Type = v_product_type;

BEGIN
    FOR product_rec IN PriceRangeCursor LOOP
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || product_rec.Product_id || ', Product Name: ' || product_rec.Product_Name || ', Price: ' || product_rec.Price);
    END LOOP;
END;


2)
DECLARE
    CURSOR HighPriceCursor IS
        SELECT Product_id, Product_Name, Price
        FROM Products
        WHERE Price > 5000;

BEGIN
    FOR product_rec IN HighPriceCursor LOOP
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || product_rec.Product_id || ', Product Name: ' || product_rec.Product_Name || ', Price: ' || product_rec.Price);
    END LOOP;
END;
/

3)
DECLARE
    v_records_affected NUMBER;

BEGIN
    -- Update the Prices of Products by incrementing by 1000
    UPDATE Products
    SET Price = Price + 1000;

    -- Get the number of records affected by the update operation
    v_records_affected := SQL%ROWCOUNT;

    DBMS_OUTPUT.PUT_LINE('Number of records updated: ' || v_records_affected);
END;


//----------------------------------------------------------------------
//-------------------------------------------------------------------

2) empoloyee

-- Create the Employee table
CREATE TABLE Employee (
    Emp_id NUMBER PRIMARY KEY,
    Emp_Name VARCHAR2(50),
    Salary NUMBER
);

-- Insert sample data into the Employee table
INSERT INTO Employee (Emp_id, Emp_Name, Salary)
VALUES (1, 'John Doe', 50000);

INSERT INTO Employee (Emp_id, Emp_Name, Salary)
VALUES (2, 'Jane Smith', 60000);

INSERT INTO Employee (Emp_id, Emp_Name, Salary)
VALUES (3, 'Alice Johnson', 70000);

-- You can continue to insert more sample data as needed

1)
DECLARE
    CURSOR HighSalaryCursor IS
        SELECT Emp_id, Emp_Name, Salary
        FROM Employee
        WHERE Salary > 50000;

BEGIN
    FOR emp_rec IN HighSalaryCursor LOOP
        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_rec.Emp_id || ', Employee Name: ' || emp_rec.Emp_Name || ', Salary: ' || emp_rec.Salary);
    END LOOP;
END;
/

2)
DECLARE
    v_total_tuples NUMBER;

BEGIN
    SELECT COUNT(*) INTO v_total_tuples
    FROM Employee;

    DBMS_OUTPUT.PUT_LINE('Total number of tuples in the Employee table: ' || v_total_tuples);
END;
/

3)
DECLARE
    v_emp_id NUMBER := &employee_id; -- User input for employee ID

    CURSOR SalaryCursor (p_emp_id NUMBER) IS
        SELECT Salary
        FROM Employee
        WHERE Emp_id = p_emp_id;

    v_salary NUMBER;
BEGIN
    OPEN SalaryCursor(v_emp_id);
    FETCH SalaryCursor INTO v_salary;
    CLOSE SalaryCursor;

    IF v_salary IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Salary of Employee ID ' || v_emp_id || ': ' || v_salary);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee ID ' || v_emp_id || ' not found.');
    END IF;
END;


1) ddl customer  create table in 1)


1)
-- Create the Customer table
CREATE TABLE Customer (
    CustID INT PRIMARY KEY,
    Name VARCHAR(50),
    Cust_Address VARCHAR(100),
    Phone_no VARCHAR(15),
    Email_ID VARCHAR(255),
    Age INT
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID INT PRIMARY KEY,
    Branch_Name VARCHAR(50),
    Address VARCHAR(100)
);

-- Create the Account table with foreign keys for referential integrity
CREATE TABLE Account (
    Account_no INT PRIMARY KEY,
    Branch_ID INT,
    CustID INT,
    date_open DATE,
    Account_type VARCHAR(20),
    Balance DECIMAL(10, 2),
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);

2)

3)
CREATE INDEX Account_PK_Index
ON Account (Account_no);

4)
CREATE VIEW Customer_Info AS
SELECT *
FROM Customer
WHERE Age < 45;

5)
CREATE SEQUENCE Branch_Sequence
START WITH 1
INCREMENT BY 1;

6)
CREATE SYNONYM Branch_info FOR Branch;

//----------------------------------------------------------------
//----------------------------------------------------------------------

2) ddl customer

1)
-- Create the Customer table
CREATE TABLE Customer (
    CustID INT PRIMARY KEY,
    Name VARCHAR(50),
    Cust_Address VARCHAR(100),
    Phone_no VARCHAR(15),
    Email_ID VARCHAR(255),
    Age INT
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID INT PRIMARY KEY,
    Branch_Name VARCHAR(50),
    Address VARCHAR(100)
);

-- Create the Account table with foreign keys for referential integrity
CREATE TABLE Account (
    Account_no INT PRIMARY KEY,
    Branch_ID INT,
    CustID INT,
    open_date DATE,
    Account_type VARCHAR(20),
    Balance DECIMAL(10, 2),
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);


2)

3)
CREATE VIEW Saving_Account AS
SELECT c.*
FROM Customer c
JOIN Account a ON c.CustID = a.CustID
WHERE a.open_date = '2018-08-16' AND a.Account_type = 'Savings';

4)
UPDATE Customer
SET Cust_Address = 'Pune'
WHERE CustID = 103;


5)
CREATE VIEW Loan_Account AS
SELECT c.*
FROM Customer c
JOIN Account a ON c.CustID = a.CustID
WHERE a.open_date = '2018-02-16' AND a.Account_type = 'Loan';

6)
CREATE INDEX Customer_PK_Index
ON Customer (CustID);

7)
CREATE SEQUENCE Customer_Sequence
START WITH 1
INCREMENT BY 1;

8)
CREATE SYNONYM Cust_info FOR Customer;


dml customer

-- Create the Customer table
CREATE TABLE Customer (
    CustID INT PRIMARY KEY,
    Name VARCHAR(50),
    Cust_Address VARCHAR(100),
    Phone_no VARCHAR(15),
    Email_ID VARCHAR(10),
    Age INT
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID INT PRIMARY KEY,
    Branch_Name VARCHAR(50),
    Address VARCHAR(100)
);

-- Create the Account table
CREATE TABLE Account (
    Account_no INT PRIMARY KEY,
    Branch_ID INT,
    CustID INT,
    date_open DATE,
    Account_type VARCHAR(20),
    Balance DECIMAL(10, 2),
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);

INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Email_ID, Age)
VALUES
(1, 'John Doe', '123 Main St', '555-123-4567', 'john.doe@example.com', 30),
(2, 'Jane Smith', '456 Elm St', '555-987-6543', 'jane.smith@example.com', 25),
(3, 'Bob Johnson', '789 Oak St', '555-555-1234', 'bob.johnson@example.com', 40);

-- Insert data into the Branch table
INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES
(1, 'Main Branch', '123 Main St'),
(2, 'Elm Branch', '456 Elm St'),
(3, 'Oak Branch', '789 Oak St');

-- Insert data into the Account table
INSERT INTO Account (Account_no, Branch_ID, CustID, date_open, Account_type, Balance)
VALUES
(101, 1, 1, '2023-01-15', 'Savings', 10000.00),
(102, 2, 2, '2023-02-20', 'Checking', 5000.00),
(103, 3, 3, '2023-03-25', 'Savings', 15000.00);




1)
ALTER TABLE Customer
MODIFY COLUMN Email_ID VARCHAR(20);

describe Customer;

2)
ALTER TABLE Customer
MODIFY COLUMN Email_ID VARCHAR(20) NOT NULL;

3)
SELECT COUNT(*) AS TotalCustomers FROM Account
WHERE Balance > 50000;

4)
SELECT AVG(Balance) AS AverageBalance
FROM Account
WHERE Account_type = 'Savings Account';

5)
SELECT *
FROM Customer
WHERE Cust_Address = 'Pune' OR Name LIKE 'A%';

6)
CREATE TABLE Saving_Account AS
SELECT Account_no, Branch_ID, CustID, date_open, Balance
FROM Account
WHERE Account_type = 'Savings';

7)
SELECT *
FROM Customer
WHERE Age IS NOT NULL
AND Age >= 0
AND Age < 120
AND CustID IN (
    SELECT CustID
    FROM Account
    WHERE Balance >= 20000
)
ORDER BY Age;


//---------------------------------------------------------------
//------------------------------------------------------------
2) dml customer without email

-- Create the Customer table
CREATE TABLE Customer (
    CustID INT PRIMARY KEY,
    Name VARCHAR(50),
    Cust_Address VARCHAR(100),
    Phone_no VARCHAR(15),
    Age INT
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID INT PRIMARY KEY,
    Branch_Name VARCHAR(50),
    Address VARCHAR(100)
);

-- Create the Account table
CREATE TABLE Account (
    Account_no INT PRIMARY KEY,
    Branch_ID INT,
    CustID INT,
    date_open DATE,
    Account_type VARCHAR(20),
    Balance DECIMAL(10, 2),
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);

-- Insert data into the Customer table
INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Age)
VALUES
(1, 'John Doe', '123 Main St', '555-123-4567', 30),
(2, 'Jane Smith', '456 Elm St', '555-987-6543', 25),
(3, 'Bob Johnson', '789 Oak St', '555-555-1234', 40);

-- Insert data into the Branch table
INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES
(1, 'Main Branch', '123 Main St'),
(2, 'Elm Branch', '456 Elm St'),
(3, 'Oak Branch', '789 Oak St');

-- Insert data into the Account table
INSERT INTO Account (Account_no, Branch_ID, CustID, date_open, Account_type, Balance)
VALUES
(101, 1, 1, '2023-01-15', 'Savings', 10000.00),
(102, 2, 2, '2023-02-20', 'Checking', 5000.00),
(103, 3, 3, '2023-03-25', 'Savings', 15000.00);


1)
ALTER TABLE Customer
ADD COLUMN Email_Address VARCHAR(255);

2)
ALTER TABLE Customer
CHANGE COLUMN Email_Address Email_ID VARCHAR(255);

3)
SELECT *
FROM Customer
WHERE CustID = (
    SELECT CustID
    FROM Account
    ORDER BY Balance DESC
    LIMIT 1
);

4)
SELECT c.*
FROM Customer c
JOIN Account a ON c.CustID = a.CustID
WHERE a.Account_type = 'Savings Account'
ORDER BY a.Balance ASC
LIMIT 1;

5)
SELECT CustID, Name, Age
FROM Customer
ORDER BY Age ASC;

6)
SELECT Account_type, GROUP_CONCAT(CONCAT(Name, ' (Branch ID: ', Branch_ID, ')') SEPARATOR ', ') AS Customers
FROM Customer c
JOIN Account a ON c.CustID = a.CustID
GROUP BY Account_type;



java connectviity

db.createCollection("Employee")

db.Employee.insertMany([
  {
    Employee_id: 1,
    Employee_Name: "John Doe",
    Employee_Salary: 60000,
    Employee_Manager: "ManagerA"
  },
  {
    Employee_id: 2,
    Employee_Name: "Jane Smith",
    Employee_Salary: 55000,
    Employee_Manager: "ManagerB"
  }
  // Insert more employee records...
]);

//------------------------------
package mongoJava;
import com.mongodb.*;
import com.mongodb.MongoClient;

import java.util.Scanner;

public class javaMongo {
	public static void main(String[] args) {
	
		DBCollection coll=null;
		try{
			// To connect to mongodb server
			MongoClient mongoClient = new MongoClient( "localhost" ,
			27017 );
			// Now connect to your database
			DB db = (DB) mongoClient.getDatabase("piyush");
			System.out.println("Connected to database successfully");
			// Selecting the Collection
			coll = db.getCollection("Employee");
			
			Scanner sc2 = new Scanner(System.in);
			int choice;
			do {
			System.out.println("Enter your choice of operation \n1.
			Display All \n2. Insert Document \n3. Delete Document \n4. Update \n5.Exit \n");
			choice = sc2.nextInt();
				switch (choice) {
				case 1:displayAll(coll);
					break;
				case 2: insertDoc(coll);
					break;
				case 3: deleteDoc(coll);
					break;
				case 4: updateDoc(coll);
					break;
				case 5: System.out.println("Exiting Program...");
					System.exit(0);
					break;
				default:
					System.out.println(choice + " is not a valid Menu Option! Please Select Another.");
				}
			}
			while(choice != 5);
		}
		
		catch(Exception ex){
		ex.printStackTrace();
		}
	}
			
	public static void insertDoc(DBCollection coll)
	{
			Scanner sc=new Scanner(System.in);
			System.out.println("Inserting document");
			BasicDBObject document = new BasicDBObject();
			System.out.println("Enter Employee id: ");
			int eid = sc.nextInt();
			System.out.println("Enter Employee Name: ");
			String ename = sc.next();
			System.out.println("Enter Employee Salary: ");
			int esalary= sc.nextInt();
			System.out.println("Enter Employee manager: ");
			String emanager = sc.next();
			document.put("id",eid);
			document.put("name",ename);
			document.put("salary",esalary);
			document.put("manager",emanager);
			coll.insert(document);
			System.out.println("Document inserted successfully");
	}
	
	public static void deleteDoc(DBCollection coll)
	{
		System.out.println("Deleting document");
		BasicDBObject document = new BasicDBObject();
		System.out.println("Enter Employee id: ");
		Scanner sc=new Scanner(System.in);
		int eid= sc.nextInt();
		document.put("id",eid);
		coll.remove(document);
		System.out.println("Document deleted successfully");
	}
	
	public static void updateDoc(DBCollection coll)
	{
		System.out.println("Updating document");
		System.out.println("Enter Employee id: ");
		Scanner sc=new Scanner(System.in);
		int eid = sc.nextInt();
		BasicDBObject searchQuery = new
		BasicDBObject().append("id", eid);
		BasicDBObject newDocument = new BasicDBObject();
		System.out.println("Enter New salary: ");
		int esalary = sc.nextInt();
		System.out.println("Enter New manager: ");
		String emanager= sc.next();
		newDocument.append("$set", new
		BasicDBObject().append("salary",esalary).append("manager", emanager));
		coll.update(searchQuery,newDocument);
		System.out.println("Document updated successfully");
	}
	
	public static void displayAll(DBCollection coll)
	{
		System.out.println("Displaying all documents in Employee
		collection");
		DBCursor cursor = coll.find();
		while(cursor.hasNext())
		{
		System.out.println(cursor.next());
		}
	}
}


1)map "student"

db.createCollection("Student")

db.Student.insertMany([
  {
    roll_no: "A1",
    name: "Student1",
    class: "TE",
    dept: "Computer Science",
    aggregate_marks: 85
  },
  {
    roll_no: "A2",
    name: "Student2",
    class: "TE",
    dept: "Mechanical Engineering",
    aggregate_marks: 92
  },
  {
    roll_no: "A3",
    name: "Student3",
    class: "SE",
    dept: "Computer Science",
    aggregate_marks: 78
  },
  // Insert more student records...
])

1)
var mapFunction = function() {
  if (this.class === "TE") {
    emit(this.dept, this.aggregate_marks);
  }
};

var reduceFunction = function(key, values) {
  return Array.sum(values);
};

db.Student.mapReduce(mapFunction, reduceFunction, {
  out: "DepartmentTotalMarks",
  query: { class: "TE" }
});

db.DepartmentTotalMarks.find();

2)
var mapFunction = function() {
  if (this.class === "SE") {
    emit(this.dept, this.aggregate_marks);
  }
};

var reduceFunction = function(key, values) {
  return Math.max.apply(null, values);
};

db.Student.mapReduce(mapFunction, reduceFunction, {
  out: "DepartmentHighestMarks",
  query: { class: "SE" }
});

db.DepartmentHighestMarks.find();

3)
var mapFunction = function() {
  if (this.class === "BE") {
    emit(this.dept, { totalMarks: this.aggregate_marks, count: 1 });
  }
};

var reduceFunction = function(key, values) {
  var reducedValue = { totalMarks: 0, count: 0 };

  for (var i = 0; i < values.length; i++) {
    reducedValue.totalMarks += values[i].totalMarks;
    reducedValue.count += values[i].count;
  }

  return reducedValue;
};

var finalizeFunction = function(key, reducedValue) {
  return reducedValue.totalMarks / reducedValue.count;
};

db.Student.mapReduce(mapFunction, reduceFunction, {
  out: "DepartmentAverageMarks",
  query: { class: "BE" },
  finalize: finalizeFunction
});

db.DepartmentAverageMarks.find();

//---------------------------------------------------------------------------
//--------------------------------------------------------------------------

2) map "Book"

db.createCollection("Book")

db.Book.insertMany([
  {
    Title: "Book1",
    Author_name: "Author1",
    Borrowed_status: "Available"
  },
  {
    Title: "Book2",
    Author_name: "Author2",
    Borrowed_status: "Borrowed"
  },
  {
    Title: "Book3",
    Author_name: "Author1",
    Borrowed_status: "Available"
  },
  // Insert more book records...
]);

1)

var mapFunction = function() {
  emit(this.Author_name, { books: [{ title: this.Title, status: this.Borrowed_status }] });
};

var reduceFunction = function(key, values) {
  var reducedValue = { books: [] };

  for (var i = 0; i < values.length; i++) {
    reducedValue.books = reducedValue.books.concat(values[i].books);
  }

  return reducedValue;
};

db.Book.mapReduce(mapFunction, reduceFunction, {
  out: "AuthorWiseBooks"
});

db.AuthorWiseBooks.find();

2)
var mapFunction = function() {
  if (this.Borrowed_status === "True") {
    emit(this.Author_name, { books: [{ title: this.Title, status: this.Borrowed_status }] });
  }
};

var reduceFunction = function(key, values) {
  var reducedValue = { books: [] };

  for (var i = 0; i < values.length; i++) {
    reducedValue.books = reducedValue.books.concat(values[i].books);
  }

  return reducedValue;
};

db.Book.mapReduce(mapFunction, reduceFunction, {
  out: "AuthorWiseBorrowedBooks"
});

db.AuthorWiseBorrowedBooks.find();

3)
db.Book.insertMany([
  {
    Title: "Book1",
    Author_name: "Author1",
    Price: 400
  },
  {
    Title: "Book2",
    Author_name: "Author2",
    Price: 250
  },
  {
    Title: "Book3",
    Author_name: "Author1",
    Price: 350
  },
  // Insert more book records...
]);

var mapFunction = function() {
  if (this.Price > 300) {
    emit(this.Author_name, { books: [{ title: this.Title, price: this.Price }] });
  }
};

var reduceFunction = function(key, values) {
  var reducedValue = { books: [] };

  for (var i = 0; i < values.length; i++) {
    reducedValue.books = reducedValue.books.concat(values[i].books);
  }

  return reducedValue;
};

db.Book.mapReduce(mapFunction, reduceFunction, {
  out: "AuthorWiseHighPricedBooks"
});

db.AuthorWiseHighPricedBooks.find();


php connectivity

QUERY FOR TABLE EMPLOYEE
CREATE TABLE Employee (
Employee_id INT AUTO_INCREMENT PRIMARY KEY,
Employee_Name VARCHAR(255) NOT NULL,
Employee_Salary DECIMAL(10, 2) NOT NULL,
Employee_Manager INT)

EMPLOYEE_FORM_PAGE
<!DOCTYPE html>
<html>
<head>
<title>Employee Management</title>
</head>
<body>
<h1>Employee Management</h1>
<form action="create_employee.php" method="post">
<label for="Employee_Name">Employee Name:</label>
<input type="text" name="Employee_Name" required><br>
<label for="Employee_Salary">Employee Salary:</label>
<input type="number" name="Employee_Salary" step="0.01" required><br>
<label for="Employee_Manager">Employee Manager (ID):</label>
<input type="number" name="Employee_Manager"><br>
<input type="submit" value="Create Employee">
</form>
<br>
<form action="read_employee.php" method="get">
<input type="submit" value="View Records">
</form>
<br>
<form action="delete_employee.php" method="post">
<input type="submit" value="Delete Record">
</form>
<br>
<form action="update_employee.php" method="post">
<input type="submit" value="Update Record">
</form>
</body>
</html>

CREATE_EMPLOYEE
<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "test";
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
die("Connection failed: " . $conn->connect_error);
}
$Employee_Name = $_POST['Employee_Name'];
$Employee_Salary = $_POST['Employee_Salary'];
$Employee_Manager = $_POST['Employee_Manager'];
$sql = "INSERT INTO Employee (Employee_Name, Employee_Salary, Employee_Manager) VALUES
('$Employee_Name', $Employee_Salary, $Employee_Manager)";
if ($conn->query($sql) === TRUE) {
echo "Employee created successfully";
} else {
echo "Error: " . $sql . "<br>" . $conn->error;
}
echo '<br><a href="employee_form.php">Back to Employee Form</a>';
$conn->close();
?>

READ_EMPLOYEE
<?php
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "test";
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
die("Connection failed: " . $conn->connect_error);
}
$sql = "SELECT * FROM Employee";
$result = $conn->query($sql);
if ($result->num_rows > 0) {
echo "<table><tr><th>ID</th><th>Name</th><th>Salary</th><th>Manager</th></tr>";
while($row = $result->fetch_assoc()) {
echo
"<tr><td>".$row["Employee_id"]."</td><td>".$row["Employee_Name"]."</td><td>".$row["Employee_S
alary"]."</td><td>".$row["Employee_Manager"]."</td></tr>";
}
echo "</table>";
} else {
echo "0 results";
}
echo '<br><a href="employee_form.php">Back to Employee Form</a>';
$conn->close();
?>

UPDATE_EMPLOYEE
<!DOCTYPE html>
<html>
<head>
<title>Update Employee</title>
</head>
<body>
<h1>Update Employee</h1>
<form action="update_employee.php" method="post">
<label for="Employee_ID">Enter Employee ID to Update:</label>
<input type="number" name="Employee_ID" required>
<br>
<label for="Employee_Name">New Employee Name:</label>
<input type="text" name="Employee_Name" required>
<br>
<label for="Employee_Salary">New Employee Salary:</label>
<input type="number" name="Employee_Salary" step="0.01" required>
<br>
<label for="Employee_Manager">New Employee Manager (ID):</label>
<input type="number" name="Employee_Manager">
<br>
<input type="submit" value="Update Employee">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "test";
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
die("Connection failed: " . $conn->connect_error);
}
$employee_id = $_POST['Employee_ID'];
$Employee_Name = $_POST['Employee_Name'];
$Employee_Salary = $_POST['Employee_Salary'];
$Employee_Manager = $_POST['Employee_Manager'];
$sql = "UPDATE Employee SET Employee_Name='$Employee_Name',
Employee_Salary=$Employee_Salary, Employee_Manager=$Employee_Manager WHERE
Employee_id=$employee_id";
if ($conn->query($sql) === TRUE) {
echo "Employee with ID $employee_id has been updated successfully.";
} else {
echo "Error: " . $sql . "<br>" . $conn->error;
}
echo '<br><a href="employee_form.php">Back to Employee Form</a>';
$conn->close();
}
?>
</body>
</html>

DELETE_EMPLOYEE
<!DOCTYPE html>
<html>
<head>
<title>Delete Employee</title>
</head>
<body>
<h1>Delete Employee</h1>
<form action="delete_employee.php" method="post">
<label for="Employee_ID">Enter Employee ID to Delete:</label>
<input type="number" name="Employee_ID" required>
<input type="submit" value="Delete Employee">
</form>
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
$servername = "localhost";
$username = "root";
$password = "";
$dbname = "test";
$conn = new mysqli($servername, $username, $password, $dbname);
if ($conn->connect_error) {
die("Connection failed: " . $conn->connect_error);
}
$employee_id = $_POST['Employee_ID'];
$sql = "DELETE FROM Employee WHERE Employee_id=$employee_id";
if ($conn->query($sql) === TRUE) {
echo "Employee with ID $employee_id has been deleted successfully.";
} else {
echo "Error: " . $sql . "<br>" . $conn->error;
}
echo '<br><a href="employee_form.php">Back to Employee Form</a>';
$conn->close();
}
?>
</body>
</html>

1) procedure  account

-- Create the Account table
CREATE TABLE Account (
    Account_No NUMBER PRIMARY KEY,
    Cust_Name VARCHAR2(50),
    Balance NUMBER,
    NoOfYears NUMBER
);

-- Create the Earned_Interest table
CREATE TABLE Earned_Interest (
    Account_No NUMBER PRIMARY KEY,
    Interest_Amt NUMBER,
    FOREIGN KEY (Account_No) REFERENCES Account(Account_No)
);

-- Insert sample data into the Account table
INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears)
VALUES (1, 'John Doe', 10000, 3);

INSERT INTO Account (Account_No, Cust_Name, Balance, NoOfYears)
VALUES (2, 'Jane Smith', 15000, 2);

-- Insert sample data into the Earned_Interest table
INSERT INTO Earned_Interest (Account_No, Interest_Amt)
VALUES (1, 500);

INSERT INTO Earned_Interest (Account_No, Interest_Amt)
VALUES (2, 600);

1)

CREATE OR REPLACE PROCEDURE CalculateAndStoreInterest(
    p_Account_No NUMBER,
    p_Interest_Rate NUMBER
) IS
    v_Principal NUMBER;
    v_Interest_Amt NUMBER;
BEGIN
    -- Get the principal amount from the Account table based on Account_No
    SELECT Balance INTO v_Principal
    FROM Account
    WHERE Account_No = p_Account_No;

    -- Calculate the interest amount
    v_Interest_Amt := (v_Principal * p_Interest_Rate) / 100;

    -- Insert the interest amount into the Earned_Interest table
    INSERT INTO Earned_Interest (Account_No, Interest_Amt)
    VALUES (p_Account_No, v_Interest_Amt);

    COMMIT;

    -- Display all details from the Earned_Interest table
    FOR interest_record IN (SELECT * FROM Earned_Interest) LOOP
        DBMS_OUTPUT.PUT_LINE('Account_No: ' || interest_record.Account_No || ', Interest_Amt: ' || interest_record.Interest_Amt);
    END LOOP;
END;

DECLARE
    v_Account_No NUMBER := 1; -- Replace with the desired Account_No
    v_Interest_Rate NUMBER := 5; -- Replace with the desired Interest Rate
BEGIN
    CalculateAndStoreInterest(v_Account_No, v_Interest_Rate);
END;


2)
-- Create the function to return high balance accounts
CREATE OR REPLACE FUNCTION GetHighBalanceAccounts RETURN SYS_REFCURSOR IS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT *
    FROM Account
    WHERE Balance > 50000;

    RETURN v_cursor;
END;


-- Use the function in a SQL query to retrieve high balance accounts
SELECT * FROM TABLE(GetHighBalanceAccounts);


//--------------------------------------------------------
//---------------------------------------------------------

2)employee


-- Create the Employee table
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    dept_id NUMBER,
    emp_name VARCHAR2(50),
    DoJ DATE,
    salary NUMBER,
    commission NUMBER,
    job_title VARCHAR2(50)
);

-- Insert sample data into the Employee table
INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (1, 101, 'John Doe', TO_DATE('2023-01-15', 'yyyy-mm-dd'), 50000, 2500, 'Manager');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (2, 102, 'Jane Smith', TO_DATE('2023-02-20', 'yyyy-mm-dd'), 60000, 3000, 'Developer');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, commission, job_title)
VALUES (3, 103, 'Alice Johnson', TO_DATE('2023-03-10', 'yyyy-mm-dd'), 70000, 3500, 'Designer');


1)
CREATE OR REPLACE PROCEDURE RecordEmployeeCommission AS
BEGIN
    -- Update commission based on conditions
    UPDATE Employee
    SET commission =
        CASE
            WHEN salary > 10000 THEN salary * 0.004
            WHEN salary <= 10000 AND NoOfYears > 10 THEN salary * 0.0035
            WHEN salary < 3000 THEN salary * 0.0025
            ELSE salary * 0.0015
        END;
    
    COMMIT;
END;


-- Calling the procedure to record employee commissions
BEGIN
    RecordEmployeeCommission;
END;


2)
CREATE OR REPLACE FUNCTION GetDepartmentManager(p_dept_id NUMBER) RETURN VARCHAR2 IS
    v_manager_name VARCHAR2(50);
BEGIN
    -- Retrieve the name of the manager for the specified department
    SELECT emp_name INTO v_manager_name
    FROM Employee
    WHERE dept_id = p_dept_id AND job_title = 'Manager';

    RETURN v_manager_name;
END;

-- Calling the function to get the department manager
DECLARE
    v_manager_name VARCHAR2(50);
BEGIN
    v_manager_name := GetDepartmentManager(101); -- Replace 101 with the desired department ID
    DBMS_OUTPUT.PUT_LINE('Department Manager: ' || v_manager_name);
END;

1) subquery  employee

-- Create the Employee table
CREATE TABLE Employee (
    Employee_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Hire_date DATE,
    Salary DECIMAL(10, 2),
    Job_title VARCHAR(50),
    Manager_id INT,
    department_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (department_id) REFERENCES Departments(Department_id)
);

-- Create the Departments table
CREATE TABLE Departments (
    Department_id INT PRIMARY KEY,
    Department_name VARCHAR(50),
    Manager_id INT,
    Location_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Location_id) REFERENCES Locations(Location_id)
);

-- Create the Locations table
CREATE TABLE Locations (
    Location_id INT PRIMARY KEY,
    Street_address VARCHAR(100),
    Postal_code VARCHAR(10),
    City VARCHAR(50),
    State VARCHAR(50),
    Country_id INT
);

-- Create the Manager table
CREATE TABLE Manager (
    Manager_id INT PRIMARY KEY,
    Manager_name VARCHAR(50)
);


1)
SELECT e.First_name, e.Last_name, e.Salary
FROM Employee e
JOIN Departments d ON e.department_id = d.Department_id
WHERE e.Salary > (
    SELECT AVG(Salary)
    FROM Employee
    WHERE department_id IN (
        SELECT Department_id
        FROM Departments
        WHERE Department_name LIKE 'IT%'
    )
);

2)
SELECT e.First_name, e.Last_name, e.Salary
FROM Employee e
WHERE e.Salary = (
    SELECT MIN(Salary)
    FROM Employee
);

3)
SELECT e.Employee_id, e.First_name, e.Last_name, e.Salary
FROM Employee e
WHERE e.Salary > (
    SELECT AVG(Salary)
    FROM Employee
    WHERE department_id = e.department_id
);

4)
SELECT d.Department_name, m.Manager_name, l.City
FROM Departments d
JOIN Manager m ON d.Manager_id = m.Manager_id
JOIN Locations l ON d.Location_id = l.Location_id;


5)
SELECT e.First_name, e.Last_name, e.Hire_date, e.Salary
FROM Employee e
WHERE e.Employee_id IN (
    SELECT d.Manager_id
    FROM Departments d
    WHERE DATEDIFF(CURDATE(), e.Hire_date) > 5475
);


//--------------------------------------
//--------------------------------------

2) sub emp singh

-- Create the Employee table
CREATE TABLE Employee (
    Employee_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Hire_date DATE,
    Salary DECIMAL(10, 2),
    Job_title VARCHAR(50),
    Manager_id INT,
    department_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (department_id) REFERENCES Departments(Department_id)
);

-- Create the Departments table
CREATE TABLE Departments (
    Department_id INT PRIMARY KEY,
    Department_name VARCHAR(50),
    Manager_id INT,
    Location_id INT,
    FOREIGN KEY (Manager_id) REFERENCES Manager(Manager_id),
    FOREIGN KEY (Location_id) REFERENCES Locations(Location_id)
);

-- Create the Locations table
CREATE TABLE Locations (
    Location_id INT PRIMARY KEY,
    Street_address VARCHAR(100),
    Postal_code VARCHAR(10),
    City VARCHAR(50),
    State VARCHAR(50),
    Country_id INT
);

-- Create the Manager table
CREATE TABLE Manager (
    Manager_id INT PRIMARY KEY,
    Manager_name VARCHAR(50)
);

1)
SELECT e.First_name, e.Last_name, e.Salary
FROM Employee e
WHERE e.Salary > (
    SELECT Salary
    FROM Employee
    WHERE Last_name = 'Singh'
);

2)
SELECT e.First_name, e.Last_name
FROM Employee e
WHERE e.Manager_id IS NOT NULL
AND e.department_id IN (
    SELECT d.Department_id
    FROM Departments d
    JOIN Locations l ON d.Location_id = l.Location_id
    WHERE l.Country_id = 'United States'
);

3)
SELECT e.First_name, e.Last_name, e.Salary
FROM Employee e
WHERE e.Salary > (
    SELECT AVG(Salary)
    FROM Employee
);

4)
SELECT e.Employee_id, e.Last_name, e.Manager_id, m.Last_name AS Manager_Last_name
FROM Employee e
LEFT JOIN Employee m ON e.Manager_id = m.Employee_id;

5)
SELECT First_name, Last_name, Hire_date
FROM Employee
WHERE Hire_date > (
    SELECT Hire_date
    FROM Employee
    WHERE Last_name = 'Jones'
);

1) trigger employee  ceo

- Create the Employee table
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50),
    salary NUMBER,
    designation VARCHAR2(50)
);

-- Create the Salary_Backup table
CREATE TABLE Salary_Backup (
    backup_id NUMBER PRIMARY KEY,
    emp_id NUMBER,
    old_salary NUMBER,
    new_salary NUMBER,
    salary_difference NUMBER,
    FOREIGN KEY (emp_id) REFERENCES Employee(emp_id)
);

-- Insert sample data into the Employee table
INSERT INTO Employee (emp_id, emp_name, salary, designation)
VALUES (1, 'John Doe', 50000, 'Manager');

INSERT INTO Employee (emp_id, emp_name, salary, designation)
VALUES (2, 'Jane Smith', 60000, 'Developer');

-- Insert sample data into the Salary_Backup table
INSERT INTO Salary_Backup (backup_id, emp_id, old_salary, new_salary, salary_difference)
VALUES (1, 1, 50000, 55000, 5000);

INSERT INTO Salary_Backup (backup_id, emp_id, old_salary, new_salary, salary_difference)
VALUES (2, 2, 60000, 65000, 5000);

1)
CREATE OR REPLACE TRIGGER Salary_Change_Trigger
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
  IF :NEW.salary <> :OLD.salary THEN
    INSERT INTO Salary_Backup (emp_id, old_salary, new_salary, salary_difference)
    VALUES (:OLD.emp_id, :OLD.salary, :NEW.salary, :NEW.salary - :OLD.salary);
  END IF;
END;

2)
CREATE OR REPLACE TRIGGER Prevent_Deletion_Trigger
BEFORE DELETE ON Employee
FOR EACH ROW
BEGIN
  IF :OLD.designation = 'CEO' THEN
    RAISE_APPLICATION_ERROR(-20001, 'You cannot delete the CEO record.');
  END IF;
END;


//-------------------------------------------------------------------
//---------------------------------------------------------------------------

2) employee

-- Create the Customer table
CREATE TABLE Customer (
    CustID NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Cust_Address VARCHAR2(100),
    Phone_no VARCHAR2(15),
    Email_ID VARCHAR2(50),
    Age NUMBER
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID NUMBER PRIMARY KEY,
    Branch_Name VARCHAR2(50),
    Address VARCHAR2(100)
);

-- Create the Account table
CREATE TABLE Account (
    Account_no NUMBER PRIMARY KEY,
    Branch_ID NUMBER,
    CustID NUMBER,
    Date_open DATE,
    Account_type VARCHAR2(20),
    Balance NUMBER,
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);

-- Insert sample data into the Customer table
INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Email_ID, Age)
VALUES (1, 'John Doe', '123 Main St', '123-456-7890', 'johndoe@email.com', 30);

INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Email_ID, Age)
VALUES (2, 'Jane Smith', '456 Elm St', '987-654-3210', 'janesmith@email.com', 25);

-- Insert sample data into the Branch table
INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES (101, 'Downtown Branch', '789 Center Ave');

INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES (102, 'Suburb Branch', '456 Park Rd');

-- Insert sample data into the Account table
INSERT INTO Account (Account_no, Branch_ID, CustID, Date_open, Account_type, Balance)
VALUES (1001, 101, 1, TO_DATE('2023-01-15', 'YYYY-MM-DD'), 'Savings', 5000);

INSERT INTO Account (Account_no, Branch_ID, CustID, Date_open, Account_type, Balance)
VALUES (1002, 102, 2, TO_DATE('2023-02-20', 'YYYY-MM-DD'), 'Checking', 7000);


1)
CREATE OR REPLACE TRIGGER Ensure_Salary_Increase
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
  IF :NEW.salary < :OLD.salary THEN
    RAISE_APPLICATION_ERROR(-20001, 'Salary decrease is not allowed.');
  END IF;
END;


2)
CREATE OR REPLACE TRIGGER Record_Job_Title_Change
AFTER UPDATE OF job_title ON Employee
FOR EACH ROW
BEGIN
  INSERT INTO job_history (emp_id, old_job_title, old_dept_id, start_date, end_date)
  VALUES (:OLD.emp_id, :OLD.job_title, :OLD.dept_id, :OLD.DoJ, SYSDATE);
END;
 

