1) trigger employee  ceo

- Create the Employee table
CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(50),
    salary NUMBER,
    designation VARCHAR2(50)
);

-- Create the Salary_Backup table
CREATE TABLE Salary_Backup (
    backup_id NUMBER PRIMARY KEY,
    emp_id NUMBER,
    old_salary NUMBER,
    new_salary NUMBER,
    salary_difference NUMBER,
    FOREIGN KEY (emp_id) REFERENCES Employee(emp_id)
);

-- Insert sample data into the Employee table
INSERT INTO Employee (emp_id, emp_name, salary, designation)
VALUES (1, 'John Doe', 50000, 'Manager');

INSERT INTO Employee (emp_id, emp_name, salary, designation)
VALUES (2, 'Jane Smith', 60000, 'Developer');

-- Insert sample data into the Salary_Backup table
INSERT INTO Salary_Backup (backup_id, emp_id, old_salary, new_salary, salary_difference)
VALUES (1, 1, 50000, 55000, 5000);

INSERT INTO Salary_Backup (backup_id, emp_id, old_salary, new_salary, salary_difference)
VALUES (2, 2, 60000, 65000, 5000);

1)
CREATE OR REPLACE TRIGGER Salary_Change_Trigger
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
  IF :NEW.salary <> :OLD.salary THEN
    INSERT INTO Salary_Backup (emp_id, old_salary, new_salary, salary_difference)
    VALUES (:OLD.emp_id, :OLD.salary, :NEW.salary, :NEW.salary - :OLD.salary);
  END IF;
END;

2)
CREATE OR REPLACE TRIGGER Prevent_Deletion_Trigger
BEFORE DELETE ON Employee
FOR EACH ROW
BEGIN
  IF :OLD.designation = 'CEO' THEN
    RAISE_APPLICATION_ERROR(-20001, 'You cannot delete the CEO record.');
  END IF;
END;


//-------------------------------------------------------------------
//---------------------------------------------------------------------------

2) employee

-- Create the Customer table
CREATE TABLE Customer (
    CustID NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Cust_Address VARCHAR2(100),
    Phone_no VARCHAR2(15),
    Email_ID VARCHAR2(50),
    Age NUMBER
);

-- Create the Branch table
CREATE TABLE Branch (
    Branch_ID NUMBER PRIMARY KEY,
    Branch_Name VARCHAR2(50),
    Address VARCHAR2(100)
);

-- Create the Account table
CREATE TABLE Account (
    Account_no NUMBER PRIMARY KEY,
    Branch_ID NUMBER,
    CustID NUMBER,
    Date_open DATE,
    Account_type VARCHAR2(20),
    Balance NUMBER,
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID),
    FOREIGN KEY (CustID) REFERENCES Customer(CustID)
);

-- Insert sample data into the Customer table
INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Email_ID, Age)
VALUES (1, 'John Doe', '123 Main St', '123-456-7890', 'johndoe@email.com', 30);

INSERT INTO Customer (CustID, Name, Cust_Address, Phone_no, Email_ID, Age)
VALUES (2, 'Jane Smith', '456 Elm St', '987-654-3210', 'janesmith@email.com', 25);

-- Insert sample data into the Branch table
INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES (101, 'Downtown Branch', '789 Center Ave');

INSERT INTO Branch (Branch_ID, Branch_Name, Address)
VALUES (102, 'Suburb Branch', '456 Park Rd');

-- Insert sample data into the Account table
INSERT INTO Account (Account_no, Branch_ID, CustID, Date_open, Account_type, Balance)
VALUES (1001, 101, 1, TO_DATE('2023-01-15', 'YYYY-MM-DD'), 'Savings', 5000);

INSERT INTO Account (Account_no, Branch_ID, CustID, Date_open, Account_type, Balance)
VALUES (1002, 102, 2, TO_DATE('2023-02-20', 'YYYY-MM-DD'), 'Checking', 7000);


1)
CREATE OR REPLACE TRIGGER Ensure_Salary_Increase
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
  IF :NEW.salary < :OLD.salary THEN
    RAISE_APPLICATION_ERROR(-20001, 'Salary decrease is not allowed.');
  END IF;
END;


2)
CREATE OR REPLACE TRIGGER Record_Job_Title_Change
AFTER UPDATE OF job_title ON Employee
FOR EACH ROW
BEGIN
  INSERT INTO job_history (emp_id, old_job_title, old_dept_id, start_date, end_date)
  VALUES (:OLD.emp_id, :OLD.job_title, :OLD.dept_id, :OLD.DoJ, SYSDATE);
END;







